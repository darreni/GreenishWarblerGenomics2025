---
title: "Greenish Warbler PCA plots"
author: "Darren Irwin"
date: last-modified
date-format: long
execute:
  echo: true
format:
  html:
    code-fold: false
    fig-width: 8
    fig-height: 6
jupyter: julia-1.11
---

This page shows the code used to generate PCA plots for the whole genome (and also for each chromosome, although those aren't shown in the paper).

Prior to examining the code on this page, readers should look at `GreenishWarblerGenomics2025.qmd` (or `.html`) and `GW_Zchromosome_analysis.qmd` (or `.html`), as this current page depends on the code on those pages being run first.

#### Citation

The scripts, data, and figures shown in this website were used as the basis for the paper listed below, which should be cited as the source of information from this website:

Irwin, D., S. Bensch, C. Charlebois, G. David, A. Geraldes, S.K. Gupta, B. Harr, P. Holt, J.H. Irwin, V.V. Ivanitskii, I.M. Marova, Y. Niu, S. Seneviratne, A. Singh, Y. Wu, S. Zhang, T.D. Price. 2025. The distribution and dispersal of large haploblocks in a superspecies. _Molecular Ecology_, minor revision requested.

#### A note about plots in this document

The plots shown below may different somewhat in appearance between the version produced by Quarto (i.e., in this published document) and the version you would get if you run this code without using Quarto. In particular, the dimensions and font sizes of labels and titles may differ. So if you want the versions identical to those used in the paper, run the code directly in the Julia REPL (or using an environment such as VS Code) without using Quarto.

In the rendered (`.html`) version of this Quarto notebook, each figure may be accompanied by a warning caused by an interaction between Quarto and the Makie plotting package. Ignore these warnings as they do not affect the calculations or plots.

## Load packages

```{julia}
using JLD2 # for loading saved data
using DataFrames # for storing data as type DataFrame
using CairoMakie # for plots
using Statistics # for var() function
using MultivariateStats # for getting variances from PCA model
using CSV # for reading in delimited files
# using Impute # for imputing missing genotypes
```

Load my custom package `GenomicDiversity`:

```{julia}
using GenomicDiversity
```

## Choose working directory

```{julia}
dataDirectory = "/Users/darrenirwin/Dropbox/Darren's current work/"
cd(dataDirectory)
```

## Load the filtered dataset

This dataset was produced through filtering in `GreenishWarblerGenomics2025.qmd`:

```{julia}
baseName = "GW_genomics_2022_with_new_genome/GW2022_GBS_012NA_files/GW2022_all4plates.genotypes.SNPs_only.whole_genome"
tagName = ".Jan2025."
filename = string(baseName, tagName, "ind_SNP_ind_filtered.jld2")
# load info into a dictionary (and check for errors):
d = load(filename)
if baseName != d["baseName"]
    println("WARNING: baseNames don't match between that defined above and in the saved file")
end
if tagName != d["tagName"]
    println("WARNING: tagNames don't match don't match between that defined above and in the saved file")
end
genosOnly = d["genosOnly_ind_SNP_ind_filtered"]
ind_with_metadata_indFiltered = d["ind_with_metadata_indFiltered"]
pos_SNP_filtered = d["pos_SNP_filtered"]
repoDirectory = d["repoDirectory"]
dataDirectory = d["dataDirectory"]
scaffold_info = d["scaffold_info"]
scaffold_lengths = d["scaffold_lengths"]
filenameTextMiddle = d["filenameTextMiddle"]
missingGenotypeThreshold = d["missingGenotypeThreshold"]
filenameTextEnd = d["filenameTextEnd"]
chromosomes_to_process =d["chromosomes_to_process"]
println("Loaded the filtered data.")
```


## Make final whole-genome PCA 

Now that the Z-chromosome problem has been solved (by removing SNPs 
that had a divergent W sequence mapped onto that Z location), we can construct
a new whole-genome PCA. I will combine the saved imputed genotypes for 
each chromosome into a large data matrix, and conduct PCA on that.

We need to first specify some groups to include in the plot, and their colors:

```{julia}
groups_to_plot_PCA = ["vir","vir_S","nit", "lud_PK", "lud_KS", "lud_central", "lud_Sath", "lud_ML","troch_west","troch_LN","troch_EM","obs","plumb_BJ","plumb","plumb_vir"]
group_colors_PCA = ["blue","turquoise1","grey","seagreen4","seagreen3","seagreen2","olivedrab3","olivedrab2","olivedrab1","yellow","gold","orange","pink","red","purple"];
```

#### Make list of scaffolds to include in the whole-genome PCA:

```{julia}
scaffolds_to_include = "gw" .* string.(vcat(28:-1:17, 15:-1:1))
push!(scaffolds_to_include, "gw1A", "gw4A", "gwZ_cleaned")  # add three other scaffolds
```

```{julia}
# initialize data structures for genotypes and positions
imputeMethod = "KNN"  # choices are KNN or SVD

genos_imputed_loaded = Matrix{Union{Missing, Float32}}(undef, nrow(ind_with_metadata_indFiltered), 0)
pos_SNP_loaded = DataFrame(chrom = String[], position = Int64[])
for i in eachindex(scaffolds_to_include)
    chrom = scaffolds_to_include[i]
    regionText = string("chr", chrom)
    filename = string(baseName, tagName, regionText, ".", imputeMethod, "imputedMissing.jld2")
    imputed_genos_one_chr = load(filename, "imputed_genos")
    genos_imputed_loaded = hcat(genos_imputed_loaded, imputed_genos_one_chr)
    if ind_with_metadata_indFiltered.ind != load(filename, "ind_with_metadata_indFiltered")[:, :ind]
        println("""Warning: "ind" columns in loaded data and memory data don't match.""")
    end
    pos_SNP_filtered_region = load(filename, "pos_SNP_filtered_region")
    pos_SNP_loaded = vcat(pos_SNP_loaded, pos_SNP_filtered_region)
    println(string("Loaded ",filename))
    println(string(regionText, ": ", size(imputed_genos_one_chr,2), " SNPs from ", size(imputed_genos_one_chr,1), " individuals"))
end
flipPC1 = true
flipPC2 = true
PCA_wholeGenome = plotPCA(genos_imputed_loaded, ind_with_metadata_indFiltered, 
        groups_to_plot_PCA, group_colors_PCA; 
        sampleSet = "greenish warblers", regionText = "wholeGenome",
        flip1 = flipPC1, flip2 = flipPC2,
        lineOpacity = 0.7, fillOpacity = 0.6,
        symbolSize = 14, showTitle = false)
totalObservationVariance = var(PCA_wholeGenome.model) 
PC1_variance, PC2_variance = principalvars(PCA_wholeGenome.model)[1:2]
PC1_prop_variance = PC1_variance / totalObservationVariance
PC2_prop_variance = PC2_variance / totalObservationVariance
println("PC1 explains ", 100*PC1_prop_variance, "% of the total variance.
PC2 explains ", 100*PC2_prop_variance, "%.")

ind_with_metadata_indFiltered.PC1 = PCA_wholeGenome.PC1
ind_with_metadata_indFiltered.PC2 = PCA_wholeGenome.PC2

# add position of reference genome
refGenomePCAposition = predict(PCA_wholeGenome.model, zeros(size(genos_imputed_loaded, 2)))
flipPC1 && (refGenomePCAposition[1] *= -1)  # this flips PC1 if flipPC1 = true
flipPC2 && (refGenomePCAposition[2] *= -1)  # same for PC2
CairoMakie.scatter!(refGenomePCAposition[1], refGenomePCAposition[2], marker = :diamond, color="black", markersize=15, strokewidth=0.5)
try
    display(PCA_wholeGenome.PCAfig)
catch
    println("NOTICE: Figure for ", regionText, " could not be shown due to an unknown error.")
end

if true  #set to true to save
    save(string("Figure1B_PCAwholeGenome_", imputeMethod,"imputed_fromJulia.png"), PCA_wholeGenome.PCAfig, px_per_unit = 2.0)
end
```

## Plot location around ring vs. PC1:

```{julia}
f = CairoMakie.Figure()
ax = Axis(f[1, 1],
    title = "",    #"Genomic PC1 around ring"
    xlabel = "Location around ring (km)", xlabelsize = 24,
    ylabel = "Genomic PC1", ylabelsize = 24)
hidedecorations!(ax, label = false, ticklabels = false, ticks = false) # hide background lattice
jitterSize = 100   # in km
x_plot_values = ind_with_metadata_indFiltered.ring_km .+ jitterSize .* (rand(length(ind_with_metadata_indFiltered.PC1)) .- 0.5)
y_plot_values = ind_with_metadata_indFiltered.PC1
for i in eachindex(groups_to_plot_PCA) 
    selection = ind_with_metadata_indFiltered.Fst_group .== groups_to_plot_PCA[i]
    CairoMakie.scatter!(ax, x_plot_values[selection], y_plot_values[selection], marker = :diamond, color = (group_colors_PCA[i], 0.6), markersize=14, strokewidth=0.5, strokecolor = ("black", 0.7))
end
# add position of reference genome
cd(repoDirectory)
ring_locations = DataFrame(CSV.File("metadata/GW2023_ring_locations.txt"))
refGenome_location = ring_locations.LocationAroundRing[ring_locations.location_short .== "GG"][1]
CairoMakie.scatter!(refGenome_location, refGenomePCAposition[1], marker = :diamond, color="black", markersize=15, strokewidth=0.5)
cd(dataDirectory)
display(f)

if true  #set to true to save
    save("Figure1C_PCAwholeGenomeAroundRing_fromJulia.png", f, px_per_unit = 2.0)
end
```


#### Make a whole-genome PCA just for the western side of the ring

```{julia}
western_groups_to_plot_PCA = ["vir", "vir_misID", "vir_S", "nit", "lud_PK", "lud_KS", "lud_central", "lud_Sath", "lud_ML", "troch_west", "troch_LN"]
western_group_colors_PCA = ["blue", "blue", "turquoise1", "grey", "seagreen4", "seagreen3", "seagreen2", "olivedrab3", "olivedrab2", "olivedrab1", "yellow"]
PCA_wholeGenome = plotPCA(genos_imputed_loaded, ind_with_metadata_indFiltered,
    western_groups_to_plot_PCA, western_group_colors_PCA;
    sampleSet="greenish warblers", regionText="wholeGenome",
    flip1=false, flip2=false,
    lineOpacity = 0.7, fillOpacity = 0.6,
    symbolSize = 14, showTitle = false)
totalObservationVariance = var(PCA_wholeGenome.model)
PC1_variance, PC2_variance = principalvars(PCA_wholeGenome.model)[1:2]
PC1_prop_variance = PC1_variance / totalObservationVariance
PC2_prop_variance = PC2_variance / totalObservationVariance
println("PC1 explains ", 100 * PC1_prop_variance, "% of the total variance.
    PC2 explains ", 100 * PC2_prop_variance, "%.")
```


#### Make a whole-genome PCA just for the eastern side of the ring

```{julia}
eastern_groups_to_plot_PCA = ["troch_LN","troch_EM","obs","plumb_BJ","plumb"]
eastern_group_colors_PCA = ["yellow","gold","orange","pink","red"]
flipPC1 = false
flipPC2 = true
PCA_wholeGenome = plotPCA(genos_imputed_loaded, ind_with_metadata_indFiltered, 
        eastern_groups_to_plot_PCA, eastern_group_colors_PCA; 
        sampleSet = "greenish warblers", regionText = "wholeGenome",
        flip1 = flipPC1, flip2 = flipPC2,
        lineOpacity = 0.7, fillOpacity = 0.6,
        symbolSize = 14, showTitle = false)
totalObservationVariance = var(PCA_wholeGenome.model) 
PC1_variance, PC2_variance = principalvars(PCA_wholeGenome.model)[1:2]
PC1_prop_variance = PC1_variance / totalObservationVariance
PC2_prop_variance = PC2_variance / totalObservationVariance
println("PC1 explains ", 100*PC1_prop_variance, "% of the total variance.
PC2 explains ", 100*PC2_prop_variance, "%.")
```


## Make PCA plots for individual scaffolds

Define a function for plotting one PCA for a scaffold:
```{julia}
function plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,
                        baseName, tagName, scaffold; 
                        flipPC1, flipPC2, showTitle)

    regionText = string("chr", scaffold)
    filename = string(baseName, tagName, regionText, ".KNNimputedMissing.jld2")
    imputed_genos = load(filename, "imputed_genos")
    ind_with_metadata_indFiltered = load(filename, "ind_with_metadata_indFiltered")
    pos_SNP_filtered_region = load(filename, "pos_SNP_filtered_region")
    println(string("Loaded ",filename))
    println(string(regionText, ": ", size(imputed_genos,2), " SNPs from ", size(imputed_genos,1), " individuals"))
    # flipPC1 = true
    # flipPC2 = true
    PCAmodel = plotPCA(imputed_genos, ind_with_metadata_indFiltered, 
            groups_to_plot_PCA, group_colors_PCA; 
            sampleSet = "greenish warblers", regionText=regionText,
            flip1 = flipPC1, flip2 = flipPC2,
            lineOpacity = 0.7, fillOpacity = 0.6,
            symbolSize = 14, showTitle = showTitle,
            xLabelText = string("Chromosome ", scaffold," PC1"), yLabelText = string("Chromosome ", scaffold," PC2"),
            showPlot = false)

    totalObservationVariance = var(PCAmodel.model) 
    PC1_variance, PC2_variance = principalvars(PCAmodel.model)[1:2]
    PC1_prop_variance = PC1_variance / totalObservationVariance
    PC2_prop_variance = PC2_variance / totalObservationVariance
    println("PC1 explains ", 100*PC1_prop_variance, "% of the total variance.
    PC2 explains ", 100*PC2_prop_variance, "%.")
            
    # add position of reference genome
    refGenomePCAposition = predict(PCAmodel.model, zeros(size(imputed_genos, 2)))
    flipPC1 && (refGenomePCAposition[1] *= -1)  # this flips PC1 if flipPC1 = true
    flipPC2 && (refGenomePCAposition[2] *= -1)  # same for PC2
    CairoMakie.scatter!(refGenomePCAposition[1], refGenomePCAposition[2], marker = :diamond, color="black", markersize=14, strokewidth=0.5)
    try
        display(PCAmodel.PCAfig)
    catch
        println("NOTICE: Figure for ", regionText, " could not be shown due to an unknown error.")
    end
    return PCAmodel   
end
```
 
#### Make PCA plots for each chromosome, with option to save:

```{julia}
savefig = false  #set to true to save the figures from cells below
```


```{julia}
scaffold = "gw1"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw1A"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=false, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw2"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw3"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw4"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=false, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw4A"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw5"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw6"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw7"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw8"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw9"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw10"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw11"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=false, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw12"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw13"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=false, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw14"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw15"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw17"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw18"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw19"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw20"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw21"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw22"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw23"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw24"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw25"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw26"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw27"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "gw28"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

## Make Z chromosome PCA:

```{julia}
regionText = "chrgwZ_cleaned"
filename = string(baseName, tagName, regionText, ".KNNimputedMissing.jld2")
imputed_genos = load(filename, "imputed_genos")
ind_with_metadata_indFiltered = load(filename, "ind_with_metadata_indFiltered")
pos_SNP_filtered_region = load(filename, "pos_SNP_filtered_region")
println(string("Loaded ",filename))
println(string(regionText, ": ", size(imputed_genos,2), " SNPs from ", size(imputed_genos,1), " individuals"))
flipPC1 = true
flipPC2 = true
PCAmodel = plotPCA(imputed_genos, ind_with_metadata_indFiltered, 
        groups_to_plot_PCA, group_colors_PCA; 
        sampleSet = "greenish warblers", regionText=regionText,
        flip1 = flipPC1, flip2 = flipPC2,
        lineOpacity = 0.7, fillOpacity = 0.6,
        symbolSize = 14, showTitle = false,
        xLabelText = string("Chromosome Z PC1"), yLabelText = string("Chromosome Z PC2"),
        showPlot = true)

totalObservationVariance = var(PCAmodel.model) 
PC1_variance, PC2_variance = principalvars(PCAmodel.model)[1:2]
PC1_prop_variance = PC1_variance / totalObservationVariance
PC2_prop_variance = PC2_variance / totalObservationVariance
println("PC1 explains ", 100*PC1_prop_variance, "% of the total variance.
PC2 explains ", 100*PC2_prop_variance, "%.")
        
# add position of reference genome
refGenomePCAposition = predict(PCAmodel.model, zeros(size(imputed_genos, 2)))
flipPC1 && (refGenomePCAposition[1] *= -1)  # this flips PC1 if flipPC1 = true
flipPC2 && (refGenomePCAposition[2] *= -1)  # same for PC2
CairoMakie.scatter!(refGenomePCAposition[1], refGenomePCAposition[2], marker = :diamond, color="black", markersize=14, strokewidth=0.5)
try
    display(PCAmodel.PCAfig)
catch
    println("NOTICE: Figure for ", regionText, " could not be shown due to an unknown error.")
end
if savefig  #set to true to save
    filename = string("Figure_gwZ_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```


##### The below script will produce a bunch of PCAs for different scaffolds, but will not appropriately flip the axes of each as the above ones do (so making inactive):

```julia
scaffolds_to_show_PCA = "gw" .* string.(vcat(1:15, 17:28))
push!(scaffolds_to_show_PCA, "gw1A", "gw4A", "gwZ_cleaned")  # add three other scaffolds

for i in eachindex(scaffolds_to_show_PCA)
    chrom = scaffolds_to_show_PCA[i]
    PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA,
                                group_colors_PCA,    
                                baseName, tagName, chrom;
                                flipPC1=true, flipPC2=true, showTitle=true)
end
```
