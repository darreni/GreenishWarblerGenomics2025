---
title: "Greenish Warbler PCA plots"
author: "Darren Irwin"
date: "9/10/2023"
execute:
  echo: true
format:
  html:
    code-fold: false
  pdf:
    keep-tex: false
    monofont: "JuliaMono"
jupyter: julia-1.11
---

This script depends on `GreenishWarblerGenomics2023.qmd` and `GW_Zchromosome_analysis.qmd`

## Load the filtered dataset

This dataset was produced through filtering in GreenishWarblerGenomics2023.qmd

```{julia}
filename = string(baseName, tagName, ".ind_SNP_ind_filtered.jld2")
genosOnly = load(filename, "genosOnly_ind_SNP_ind_filtered")
ind_with_metadata_indFiltered = load(filename, "ind_with_metadata_indFiltered")
pos_SNP_filtered = load(filename, "pos_SNP_filtered")
println("Loaded the filtered data.")
```

# Make final whole-genome PCA 

Now that the Z-chromosome problem has been solved (by removing SNPs 
that had a divergent W sequence mapped onto that Z location), we can construct
a new whole-genome PCA. I will combine the saved imputed genotypes for 
each chromosome into a large data matrix, and conduct PCA on that.

We need to first specify some groups to include in the plot, and their colors:

```{julia}
groups_to_plot_PCA = ["vir","vir_S","nit", "lud_PK", "lud_KS", "lud_central", "lud_Sath", "lud_ML","troch_west","troch_LN","troch_EM","obs","plumb_BJ","plumb","plumb_vir"]
group_colors_PCA = ["blue","turquoise1","grey","seagreen4","seagreen3","seagreen2","olivedrab3","olivedrab2","olivedrab1","yellow","gold","orange","pink","red","purple"];
```

#### Make list of scaffolds to include in the whole-genome PCA:

```{julia}
scaffolds_to_include = "gw" .* string.(vcat(28:-1:17, 15:-1:1))
push!(scaffolds_to_include, "gw1A", "gw4A", "gwZ_cleaned")  # add two other scaffolds
```

```{julia}
#chromosomes_to_process[chromosomes_to_process .== "gwZ"] .= "gwZ_cleaned"
# initialize data structures for gneotypes and positions
genos_imputed_loaded = Matrix{Union{Missing, Float32}}(undef, nrow(ind_with_metadata_indFiltered), 0)
pos_SNP_loaded = DataFrame(chrom = String[], position = Int64[])
for i in eachindex(scaffolds_to_include)
    chrom = scaffolds_to_include[i]
    regionText = string("chr", chrom)
    filename = string(baseName, tagName, regionText, ".SVDimputedMissing.jld2")
    imputed_genos_one_chr = load(filename, "imputed_genos")
    genos_imputed_loaded = hcat(genos_imputed_loaded, imputed_genos_one_chr)
    if ind_with_metadata_indFiltered.ind != load(filename, "ind_with_metadata_indFiltered")[:, :ind]
        println("""Warning: "ind" columns in loaded data and memory data don't match.""")
    end
    pos_SNP_filtered_region = load(filename, "pos_SNP_filtered_region")
    pos_SNP_loaded = vcat(pos_SNP_loaded, pos_SNP_filtered_region)
    # println(string("Loaded ",filename))
    # println(string(regionText, ": ", size(imputed_genos_one_chr,2), " SNPs from ", size(imputed_genos_one_chr,1), " individuals"))
end
flipPC1 = false
flipPC2 = false
PCA_wholeGenome = plotPCA(genos_imputed_loaded, ind_with_metadata_indFiltered, 
        groups_to_plot_PCA, group_colors_PCA; 
        sampleSet = "greenish warblers", regionText = "wholeGenome",
        flip1 = flipPC1, flip2 = flipPC2,
        lineOpacity = 0.7, fillOpacity = 0.6,
        symbolSize = 14, showTitle = false)
totalObservationVariance = var(PCA_wholeGenome.model) 
PC1_variance, PC2_variance = principalvars(PCA_wholeGenome.model)[1:2]
PC1_prop_variance = PC1_variance / totalObservationVariance
PC2_prop_variance = PC2_variance / totalObservationVariance
println("PC1 explains ", 100*PC1_prop_variance, "% of the total variance.
PC2 explains ", 100*PC2_prop_variance, "%.")

ind_with_metadata_indFiltered.PC1 = PCA_wholeGenome.PC1
ind_with_metadata_indFiltered.PC2 = PCA_wholeGenome.PC2

# add position of reference genome
refGenomePCAposition = predict(PCA_wholeGenome.model, zeros(size(genos_imputed_loaded, 2)))
flipPC1 && (refGenomePCAposition[1] *= -1)  # this flips PC1 if flipPC1 = true
flipPC2 && (refGenomePCAposition[2] *= -1)  # same for PC2
CairoMakie.scatter!(refGenomePCAposition[1], refGenomePCAposition[2], marker = :diamond, color="black", markersize=15, strokewidth=0.5)
try
    display(PCA_wholeGenome.PCAfig)
catch
    println("NOTICE: Figure for ", regionText, " could not be shown due to an unknown error.")
end

if true  #set to true to save
    save("Figure1B_PCAwholeGenome_fromJulia.png", PCA_wholeGenome.PCAfig, px_per_unit = 2.0)
end
```

#### Plot location around ring vs. PC1:

```{julia}
f = CairoMakie.Figure()
ax = Axis(f[1, 1],
    title = "",    #"Genomic PC1 around ring"
    xlabel = "Location around ring (km)", xlabelsize = 24,
    ylabel = "Genomic PC1", ylabelsize = 24)
hidedecorations!(ax, label = false, ticklabels = false, ticks = false) # hide background lattice
jitterSize = 100   # in km
x_plot_values = ind_with_metadata_indFiltered.ring_km .+ jitterSize .* (rand(length(ind_with_metadata_indFiltered.PC1)) .- 0.5)
y_plot_values = ind_with_metadata_indFiltered.PC1
for i in eachindex(groups_to_plot_PCA) 
    selection = ind_with_metadata_indFiltered.Fst_group .== groups_to_plot_PCA[i]
    CairoMakie.scatter!(ax, x_plot_values[selection], y_plot_values[selection], marker = :diamond, color = (group_colors_PCA[i], 0.6), markersize=14, strokewidth=0.5, strokecolor = ("black", 0.7))
end
# add position of reference genome
cd(repoDirectory)
ring_locations = DataFrame(CSV.File("metadata/GW2023_ring_locations.txt"))
refGenome_location = ring_locations.LocationAroundRing[ring_locations.location_short .== "GG"][1]
CairoMakie.scatter!(refGenome_location, refGenomePCAposition[1], marker = :diamond, color="black", markersize=15, strokewidth=0.5)
cd(dataDirectory)
display(f)

if true  #set to true to save
    save("Figure1C_PCAwholeGenomeAroundRing_fromJulia.png", f, px_per_unit = 2.0)
end
```


#### Make a whole-genome PCA just for the western side of the ring

```{julia}
western_groups_to_plot_PCA = ["vir", "vir_misID", "vir_S", "nit", "lud_PK", "lud_KS", "lud_central", "lud_Sath", "lud_ML", "troch_west", "troch_LN"]
western_group_colors_PCA = ["blue", "blue", "turquoise1", "grey", "seagreen4", "seagreen3", "seagreen2", "olivedrab3", "olivedrab2", "olivedrab1", "yellow"]
PCA_wholeGenome = plotPCA(genos_imputed_loaded, ind_with_metadata_indFiltered,
    western_groups_to_plot_PCA, western_group_colors_PCA;
    sampleSet="greenish warblers", regionText="wholeGenome",
    flip1=false, flip2=false,
    lineOpacity = 0.7, fillOpacity = 0.6,
    symbolSize = 14, showTitle = false)
totalObservationVariance = var(PCA_wholeGenome.model)
PC1_variance, PC2_variance = principalvars(PCA_wholeGenome.model)[1:2]
PC1_prop_variance = PC1_variance / totalObservationVariance
PC2_prop_variance = PC2_variance / totalObservationVariance
println("PC1 explains ", 100 * PC1_prop_variance, "% of the total variance.
    PC2 explains ", 100 * PC2_prop_variance, "%.")

if false  #set to true to save
    save("Figure_3a_from_Julia.png", PCA_wholeGenome.PCAfig, px_per_unit = 2.0)
end
```


#### Make a whole-genome PCA just for the eastern side of the ring

```{julia}
eastern_groups_to_plot_PCA = ["troch_LN","troch_EM","obs","plumb_BJ","plumb"]
eastern_group_colors_PCA = ["yellow","gold","orange","pink","red"]
flipPC1 = false
flipPC2 = true
PCA_wholeGenome = plotPCA(genos_imputed_loaded, ind_with_metadata_indFiltered, 
        eastern_groups_to_plot_PCA, eastern_group_colors_PCA; 
        sampleSet = "greenish warblers", regionText = "wholeGenome",
        flip1 = flipPC1, flip2 = flipPC2,
        lineOpacity = 0.7, fillOpacity = 0.6,
        symbolSize = 14, showTitle = false)
totalObservationVariance = var(PCA_wholeGenome.model) 
PC1_variance, PC2_variance = principalvars(PCA_wholeGenome.model)[1:2]
PC1_prop_variance = PC1_variance / totalObservationVariance
PC2_prop_variance = PC2_variance / totalObservationVariance
println("PC1 explains ", 100*PC1_prop_variance, "% of the total variance.
PC2 explains ", 100*PC2_prop_variance, "%.")

if false  #set to true to save
    save("Figure_3b_from_Julia.png", PCA_wholeGenome.PCAfig, px_per_unit = 2.0)
end

# # add position of reference genome
# refGenomePCAposition = predict(PCA_wholeGenome.model, zeros(size(genos_imputed_loaded, 2)))
# flipPC1 && (refGenomePCAposition[1] *= -1)  # this flips PC1 if flipPC1 = true
# flipPC2 && (refGenomePCAposition[2] *= -1)  # same for PC2
# CairoMakie.scatter!(refGenomePCAposition[1], refGenomePCAposition[2], marker = :diamond, color="black", markersize=15, strokewidth=0.5)
# try
#     display(PCA_wholeGenome.PCAfig)
# catch
#     println("NOTICE: Figure for ", regionText, " could not be shown due to an unknown error.")
# end
```


## Make PCA plots for individual scaffolds

Define a function for plotting one PCA for a scaffold:
```{julia}
function plotOneScaffoldPCA( groups_to_plot_PCA, group_colors_PCA,
                        baseName, tagName, scaffold; 
                        flipPC1, flipPC2, showTitle)

    regionText = string("chrgw", scaffold)
    filename = string(baseName, tagName, regionText, ".KNNimputedMissing.jld2")
    imputed_genos = load(filename, "imputed_genos")
    ind_with_metadata_indFiltered = load(filename, "ind_with_metadata_indFiltered")
    pos_SNP_filtered_region = load(filename, "pos_SNP_filtered_region")
    println(string("Loaded ",filename))
    println(string(regionText, ": ", size(imputed_genos,2), " SNPs from ", size(imputed_genos,1), " individuals"))
    # flipPC1 = true
    # flipPC2 = true
    PCAmodel = plotPCA(imputed_genos, ind_with_metadata_indFiltered, 
            groups_to_plot_PCA, group_colors_PCA; 
            sampleSet = "greenish warblers", regionText=regionText,
            flip1 = flipPC1, flip2 = flipPC2,
            lineOpacity = 0.7, fillOpacity = 0.6,
            symbolSize = 14, showTitle = showTitle,
            xLabelText = string("Chromosome ", scaffold," PC1"), yLabelText = string("Chromosome ", scaffold," PC2"),
            showPlot = false)

    totalObservationVariance = var(PCAmodel.model) 
    PC1_variance, PC2_variance = principalvars(PCAmodel.model)[1:2]
    PC1_prop_variance = PC1_variance / totalObservationVariance
    PC2_prop_variance = PC2_variance / totalObservationVariance
    println("PC1 explains ", 100*PC1_prop_variance, "% of the total variance.
    PC2 explains ", 100*PC2_prop_variance, "%.")
            
    # add position of reference genome
    refGenomePCAposition = predict(PCAmodel.model, zeros(size(imputed_genos, 2)))
    flipPC1 && (refGenomePCAposition[1] *= -1)  # this flips PC1 if flipPC1 = true
    flipPC2 && (refGenomePCAposition[2] *= -1)  # same for PC2
    CairoMakie.scatter!(refGenomePCAposition[1], refGenomePCAposition[2], marker = :diamond, color="black", markersize=14, strokewidth=0.5)
    try
        display(PCAmodel.PCAfig)
    catch
        println("NOTICE: Figure for ", regionText, " could not be shown due to an unknown error.")
    end
    return PCAmodel   
end
```
 
```{julia}
scaffold = "23"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if false  #set to true to save
    save("Figure_4lowerleft_chrgw23_from_Julia.png", PCAmodel.PCAfig, px_per_unit = 2.0)
end
```

```{julia}
scaffold = "26"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if false  #set to true to save
    save("Figure_4lowerright_chrgw26_from_Julia.png", PCAmodel.PCAfig, px_per_unit = 2.0)
end
```

```{julia}
scaffold = "28"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if false  #set to true to save
    save("Figure_6lower_chrgw28_from_Julia.png", PCAmodel.PCAfig, px_per_unit = 2.0)
end
```

### Make other PCA plots for supplement:

```{julia}
savefig = false  #set to true to save the figures from cells below
```


```{julia}
scaffold = "1"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "1A"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=false, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "2"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "3"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "4"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=false, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "4A"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "5"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "6"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "7"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "8"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "9"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "10"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "11"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=false, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "12"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "13"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=false, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "14"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "15"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "17"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "18"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "19"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "20"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "21"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "22"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=false, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "23"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "24"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "25"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "26"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "27"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

```{julia}
scaffold = "28"    
PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                            baseName, tagName, scaffold;
                            flipPC1=true, flipPC2=true, showTitle=false)
if savefig  #set to true to save
    filename = string("Figure_gw", scaffold, "_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```

# Make Z chromosome PCA:

```{julia}
regionText = "chrgwZ_cleaned"
filename = string(baseName, tagName, regionText, ".KNNimputedMissing.jld2")
imputed_genos = load(filename, "imputed_genos")
ind_with_metadata_indFiltered = load(filename, "ind_with_metadata_indFiltered")
pos_SNP_filtered_region = load(filename, "pos_SNP_filtered_region")
println(string("Loaded ",filename))
println(string(regionText, ": ", size(imputed_genos,2), " SNPs from ", size(imputed_genos,1), " individuals"))
flipPC1 = true
flipPC2 = true
PCAmodel = plotPCA(imputed_genos, ind_with_metadata_indFiltered, 
        groups_to_plot_PCA, group_colors_PCA; 
        sampleSet = "greenish warblers", regionText=regionText,
        flip1 = flipPC1, flip2 = flipPC2,
        lineOpacity = 0.7, fillOpacity = 0.6,
        symbolSize = 14, showTitle = false,
        xLabelText = string("Chromosome Z PC1"), yLabelText = string("Chromosome Z PC2"),
        showPlot = true)

totalObservationVariance = var(PCAmodel.model) 
PC1_variance, PC2_variance = principalvars(PCAmodel.model)[1:2]
PC1_prop_variance = PC1_variance / totalObservationVariance
PC2_prop_variance = PC2_variance / totalObservationVariance
println("PC1 explains ", 100*PC1_prop_variance, "% of the total variance.
PC2 explains ", 100*PC2_prop_variance, "%.")
        
# add position of reference genome
refGenomePCAposition = predict(PCAmodel.model, zeros(size(imputed_genos, 2)))
flipPC1 && (refGenomePCAposition[1] *= -1)  # this flips PC1 if flipPC1 = true
flipPC2 && (refGenomePCAposition[2] *= -1)  # same for PC2
CairoMakie.scatter!(refGenomePCAposition[1], refGenomePCAposition[2], marker = :diamond, color="black", markersize=14, strokewidth=0.5)
try
    display(PCAmodel.PCAfig)
catch
    println("NOTICE: Figure for ", regionText, " could not be shown due to an unknown error.")
end
if savefig  #set to true to save
    filename = string("Figure_gwZ_PCA_allInds_from_Julia.png")
    save(filename, PCAmodel.PCAfig, px_per_unit = 2.0)
    println("Saved ", filename)
end
```




# To produce a bunch of PCAs for different scaffolds:

```{julia}
for i in eachindex(chromosomes_to_process)
    chrom = chromosomes_to_process[i]
    PCAmodel = plotOneScaffoldPCA(groups_to_plot_PCA, group_colors_PCA,    
                                baseName, tagName, chrom;
                                flipPC1=true, flipPC2=true, showTitle=true)
end
```


